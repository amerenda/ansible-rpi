---
- name: debug
  block:
  - name: test data node selection
    file:
      path: /home/alex/success
      state: touch
    when: ansible_hostname in k3s_data_nodes

  - name: end play
    meta: end_play
    when: end_after_debug

  when: debug

- name: master | uninstall old k3s
  shell: /usr/local/bin/k3s-uninstall.sh
  args:
    removes: /usr/local/bin/k3s
  when: "'k3s_master' in group_names"

- name: master | get install script
  get_url:
    url: https://raw.githubusercontent.com/rancher/k3s/master/install.sh
    dest: /tmp/k3s_installer.sh
    force: yes
    mode: 0755

- name: master | bootstrap master
  shell: "/bin/sh /tmp/k3s_installer.sh"
  args:
    warn: false
  environment:
    INSTALL_K3S_EXEC: "server --no-deploy traefik --no-deploy servicelb "
    INSTALL_K3S_VERSION: v{{ k3s_version }}
  async: 1000
  poll: 0
  register: _k3s_master_bootstrap_bg
  when: "'k3s_master' in group_names"

- name: agent | uninstall k3s agents
  file:
    path: "{{ k3s_agent_files }}"
    state: absent
  when: "'k3s_agents' in group_names and refresh_k3s_agent"

- name: agent | download k3s binary
  get_url:
    url: https://github.com/rancher/k3s/releases/download/v{{ k3s_version }}/k3s-armhf
    dest: /usr/local/bin/k3s
    mode: '0755'
  when: "'k3s_agents' in group_names"

- name: install master
  block:
  - name: master | set master facts
    set_fact:
      _k3s_role: 'server'
      _k3s_systemd_options: "{{ k3s_master_systemd_options }}"

  - name: master | wait for bootstrap master to finish (times out in 5 minutes)
    async_status: jid={{ _k3s_master_bootstrap_bg.ansible_job_id }}
    register: _job_result
    until: _job_result.finished
    retries: 300
    delay: 1
    ignore_errors: True

  - name: master | upload systemd unit file
    template:
      src: k3s.service.j2
      dest: /etc/systemd/system/k3s.service

  - name: master | upload systemd env file
    template:
      src: "k3s-{{ _k3s_role }}.service.env.j2"
      dest: "/etc/systemd/system/k3s-{{ _k3s_role }}.service.env"

  - name: master | reload systemd
    systemd:
      daemon_reload: yes

  - name: master | remove traefik
    file:
      path: /var/lib/rancher/k3s/server/manifests/traefik.yml
      state: absent

  - name: master | restart k3s
    systemd:
      name: k3s
      state: restarted
      enabled: yes

  - name: master | get join token
    command: cat /var/lib/rancher/k3s/server/node-token
    register: _k3s_token

  when: "'k3s_master' in group_names"

- name: setup data nodes
  block:
  - name: data node | ensure xfsprogs
    apt:
      name: xfsprogs
      state: present

  - name: data node | create kube mount point (data nodes)
    file:
      path: /var/kube/data
      state: directory
      owner: root
      group: root

  - name: data node | create 200gb kube image data
    command: fallocate -l 200G /var/kube/data.img

  - name: data node | create xfs on data_nodes
    filesystem:
      fstype: xfs
      dev: /var/kube/data.img

  - name: data node | mount kube image
    mount:
      path: /var/kube/data
      src: /var/kube/data.img
      fstype: xfs
      state: mounted

  when: ansible_hostname in k3s_data_nodes

- name: join agents
  block:
  - name: agent | set facts
    set_fact:
      _k3s_master_ip_address: "{{ hostvars[groups['k3s_master'][0]]['ansible_default_ipv4']['address'] }}"
      _k3s_master_join_token: "{{ hostvars[groups['k3s_master'][0]]['_k3s_token']['stdout'] }}"
      _k3s_role: "agent"
      _k3s_systemd_options: "{{ k3s_agent_systemd_options }}"

  - name: agent | upload k3s service file
    template:
      src: k3s.service.j2
      dest: /etc/systemd/system/k3s-agent.service
      owner: root
      group: root
      mode: 0600

  - name: agent | upload k3s service env file
    template:
      src: k3s-agent.service.env.j2
      dest: /etc/systemd/system/k3s-agent.service.env

  - name: agent | reload systemd
    systemd:
      daemon_reload: yes

  - name: agent | join k3s agent(s) to master
    systemd:
      name: k3s-agent
      state: restarted
      enabled: yes

  when: "'k3s_agents' in group_names"

- name: local | setup kube config
  block:
  - name: remove old kube dir
    file:
      path: ~/.kube
      state: absent

  - name: local | ensure kube dir
    file:
      path: ~/.kube
      state: directory

  delegate_to: localhost
  run_once: true
  become: false

- name: local | download kube config
  fetch:
    src: /etc/rancher/k3s/k3s.yaml
    dest: ~/.kube/config
    flat: yes
  when: "'k3s_master' in group_names"
  run_once: True

- name: local | get k3s master hostname
  set_fact:
    _k3s_master_ip_address: "{{ hostvars[groups['k3s_master'][0]]['ansible_default_ipv4']['address'] }}"
  delegate_to: localhost
  run_once: True

- name: local | search and replace kube conifg
  replace:
    dest: ~/.kube/config
    regexp: 'localhost'
    replace: "{{ _k3s_master_ip_address }}"
  delegate_to: localhost
  become: false
  run_once: True
